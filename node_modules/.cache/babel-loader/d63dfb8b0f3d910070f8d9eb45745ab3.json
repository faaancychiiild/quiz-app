{"ast":null,"code":"var _jsxFileName = \"/home/nino/Desktop/quiz-app/src/routes/quiz.js\",\n    _s = $RefreshSig$();\n\nimport { CircularProgress, Button } from \"@material-ui/core\";\nimport { useState, useEffect } from 'react';\nimport '../App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Question = ({\n  questions\n}) => {\n  _s();\n\n  var _questions$i;\n\n  const [i, setIndex] = useState(0);\n  const [chosen, setChosen] = useState(false);\n  let [options, setOptions] = useState([]);\n  let str = (_questions$i = questions[i]) === null || _questions$i === void 0 ? void 0 : _questions$i.question;\n  useEffect(() => {\n    if (questions.length > 0) {\n      var _questions$i2, _questions$i3;\n\n      let ops = (_questions$i2 = questions[i]) === null || _questions$i2 === void 0 ? void 0 : _questions$i2.incorrect_answers;\n      ops = ops.concat((_questions$i3 = questions[i]) === null || _questions$i3 === void 0 ? void 0 : _questions$i3.correct_answer);\n      ops = ops.sort(() => Math.random() > .5 ? 1 : -1);\n      setOptions(options.concat(ops));\n    }\n  }, [questions]);\n\n  const handleCheck = e => {\n    if (chosen === false) {\n      e.target.value === questions[i][\"correct_answer\"] ? e.target.style.backgroundColor = '#C4EC86' : e.target.style.backgroundColor = '#FF5733';\n    }\n\n    setChosen(true);\n  };\n\n  const Option = () => {\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"ops-wrapper\",\n      children: options.map(op => /*#__PURE__*/_jsxDEV(Button, {\n        onClick: handleCheck,\n        variant: \"outlined\",\n        value: op,\n        className: \"op-button\",\n        children: op\n      }, options.indexOf(op), false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 24\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 4\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: \"quiz-form\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: str\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(Option, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      type: \"submit\",\n      children: \"Next question\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 3\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 3\n  }, this);\n};\n\n_s(Question, \"/ps3IobU1f2aFQK2o6gWwzifBxg=\");\n\n_c = Question;\n\nconst Quiz = ({\n  questions\n}) => {\n  return questions !== [] ? /*#__PURE__*/_jsxDEV(Question, {\n    questions: questions\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 27\n  }, this) : /*#__PURE__*/_jsxDEV(CircularProgress, {\n    color: \"inherit\",\n    size: 50,\n    thickness: 1\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 63\n  }, this);\n};\n\n_c2 = Quiz;\nexport default Quiz;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Question\");\n$RefreshReg$(_c2, \"Quiz\");","map":{"version":3,"sources":["/home/nino/Desktop/quiz-app/src/routes/quiz.js"],"names":["CircularProgress","Button","useState","useEffect","Question","questions","i","setIndex","chosen","setChosen","options","setOptions","str","question","length","ops","incorrect_answers","concat","correct_answer","sort","Math","random","handleCheck","e","target","value","style","backgroundColor","Option","map","op","indexOf","Quiz"],"mappings":"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","sourcesContent":["import { CircularProgress, Button } from \"@material-ui/core\";\nimport { useState, useEffect } from 'react';\nimport '../App.css';\nconst Question = ({questions}) => {\n\tconst [i, setIndex] = useState(0);\n\tconst [chosen, setChosen] = useState(false);\n\tlet [options, setOptions] = useState([]);\n\tlet str = questions[i]?.question;\n\t\n\tuseEffect(() => {\n\t\tif(questions.length > 0){\n\t\t\tlet ops = questions[i]?.incorrect_answers;\n\t\t\tops = ops.concat(questions[i]?.correct_answer);\n\t\t\tops = ops.sort(() => (Math.random() > .5) ? 1 : -1);\n\t\t\tsetOptions(options.concat(ops));\n\t\t}\n\t}, [questions])\n\n\tconst handleCheck = (e) => {\n\t\tif(chosen===false){\n\t\t\te.target.value === questions[i][\"correct_answer\"] ? e.target.style.backgroundColor = \n\t\t\t'#C4EC86' : e.target.style.backgroundColor = '#FF5733';\n\t\t}\n\t\tsetChosen(true);\n\t}\n\n\tconst Option = () => {\n\t\treturn (\n\t\t\t<section className=\"ops-wrapper\">\n\t\t\t\t{options.map(op => <Button onClick={handleCheck} variant=\"outlined\" value={op} className=\"op-button\" key={options.indexOf(op)}>{op}</Button>)}\n\t\t\t</section>\n\t\t)\n\t}\n\n\treturn (\n\t\t<form className=\"quiz-form\">\n\t\t<p>{str}</p>\n\t\t<Option />\n\t\t<Button type='submit'>Next question</Button>\n\t\t</form>\n\t\t)\n}\n\nconst Quiz = ({questions}) => {\n\treturn (questions!==[] ? <Question questions={questions}/> : <CircularProgress\n          color=\"inherit\"\n          size={50}\n          thickness={1}\n        />);\n\t\t\n}\nexport default Quiz;\n"]},"metadata":{},"sourceType":"module"}