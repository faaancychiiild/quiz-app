{"ast":null,"code":"var _jsxFileName = \"/home/nino/Desktop/quiz-app/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Home from './routes/home';\nimport Header from './components/header';\nimport Quiz from './routes/quiz';\nimport { Button } from \"@material-ui/core\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [categories, setCategories] = useState([]);\n  const [questions, setQuestions] = useState([]);\n  const [notClicked, setNotClicked] = useState(true);\n  let [score, setScore] = useState(0);\n  useEffect(() => {\n    axios.get('https://opentdb.com/api_category.php').then(res => setCategories(res.data.trivia_categories));\n  }, []);\n\n  const getQuestions = (category, difficulty, amount) => {\n    axios.get(`https://opentdb.com/api.php?amount=10&category=${category}&difficulty=${difficulty}&type=multiple`).then(res => setQuestions(res.data.results));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main\",\n    children: /*#__PURE__*/_jsxDEV(BrowserRouter, {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Switch, {\n        className: \"app\",\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          path: \"/\",\n          exact: true,\n          children: /*#__PURE__*/_jsxDEV(Home, {\n            categories: categories,\n            getQuestions: getQuestions,\n            setQuestions: setQuestions,\n            questions: questions\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 28,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/quiz\",\n          exact: true,\n          children: questions !== [] ? /*#__PURE__*/_jsxDEV(Quiz, {\n            questions: questions,\n            score: score,\n            setScore: setScore,\n            setNotClicked: setNotClicked,\n            notClicked: notClicked\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 31,\n            columnNumber: 32\n          }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"loading\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 32,\n            columnNumber: 93\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/result\",\n          exact: true,\n          className: \"result\",\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"standard\",\n            children: [\"Your result is \", score]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"w0k8nrSnrB7VRCXGgXd+01vfbEk=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/nino/Desktop/quiz-app/src/App.js"],"names":["BrowserRouter","Route","Switch","useState","useEffect","axios","Home","Header","Quiz","Button","App","categories","setCategories","questions","setQuestions","notClicked","setNotClicked","score","setScore","get","then","res","data","trivia_categories","getQuestions","category","difficulty","amount","results"],"mappings":";;;AAAA,OAAO,WAAP;AACA,SAASA,aAAT,EAAwBC,KAAxB,EAA+BC,MAA/B,QAA6C,kBAA7C;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,eAAjB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,IAAP,MAAiB,eAAjB;AACA,SAASC,MAAT,QAAuB,mBAAvB;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACb,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BT,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACU,SAAD,EAAYC,YAAZ,IAA4BX,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAACY,UAAD,EAAaC,aAAb,IAA8Bb,QAAQ,CAAC,IAAD,CAA5C;AACA,MAAI,CAACc,KAAD,EAAQC,QAAR,IAAoBf,QAAQ,CAAC,CAAD,CAAhC;AACAC,EAAAA,SAAS,CAAC,MAAI;AACZC,IAAAA,KAAK,CAACc,GAAN,CAAU,sCAAV,EAAkDC,IAAlD,CAAuDC,GAAG,IAAIT,aAAa,CAACS,GAAG,CAACC,IAAJ,CAASC,iBAAV,CAA3E;AACD,GAFQ,EAEN,EAFM,CAAT;;AAIA,QAAMC,YAAY,GAAG,CAACC,QAAD,EAAWC,UAAX,EAAuBC,MAAvB,KAAkC;AACrDtB,IAAAA,KAAK,CAACc,GAAN,CAAW,kDAAiDM,QAAS,eAAcC,UAAW,gBAA9F,EAA+GN,IAA/G,CAAoHC,GAAG,IAAIP,YAAY,CAACO,GAAG,CAACC,IAAJ,CAASM,OAAV,CAAvI;AACD,GAFD;;AAGA,sBACE;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA,2BACE,QAAC,aAAD;AAAA,8BACE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,MAAD;AAAQ,QAAA,SAAS,EAAC,KAAlB;AAAA,gCACE,QAAC,KAAD;AAAO,UAAA,IAAI,EAAC,GAAZ;AAAgB,UAAA,KAAK,MAArB;AAAA,iCACE,QAAC,IAAD;AAAM,YAAA,UAAU,EAAEjB,UAAlB;AAA8B,YAAA,YAAY,EAAEa,YAA5C;AAA0D,YAAA,YAAY,EAAEV,YAAxE;AAAsF,YAAA,SAAS,EAAED;AAAjG;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBADF,eAIE,QAAC,KAAD;AAAO,UAAA,IAAI,EAAC,OAAZ;AAAoB,UAAA,KAAK,MAAzB;AAAA,oBACIA,SAAS,KAAG,EAAZ,gBAAiB,QAAC,IAAD;AAAM,YAAA,SAAS,EAAEA,SAAjB;AAA4B,YAAA,KAAK,EAAEI,KAAnC;AACjB,YAAA,QAAQ,EAAEC,QADO;AACG,YAAA,aAAa,EAAEF,aADlB;AACiC,YAAA,UAAU,EAAED;AAD7C;AAAA;AAAA;AAAA;AAAA,kBAAjB,gBAC8E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFlF;AAAA;AAAA;AAAA;AAAA,gBAJF,eAQE,QAAC,KAAD;AAAO,UAAA,IAAI,EAAC,SAAZ;AAAsB,UAAA,KAAK,MAA3B;AAA4B,UAAA,SAAS,EAAC,QAAtC;AAAA,iCACE,QAAC,MAAD;AAAQ,YAAA,OAAO,EAAC,UAAhB;AAAA,0CAA2CE,KAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBARF;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAmBD;;GA/BQP,G;;KAAAA,G;AAiCT,eAAeA,GAAf","sourcesContent":["import './App.css';\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Home from './routes/home';\nimport Header from './components/header';\nimport Quiz from './routes/quiz'\nimport { Button } from \"@material-ui/core\";\n\nfunction App() {\n  const [categories, setCategories] = useState([]);\n  const [questions, setQuestions] = useState([]);\n  const [notClicked, setNotClicked] = useState(true);\n  let [score, setScore] = useState(0);\n  useEffect(()=>{\n    axios.get('https://opentdb.com/api_category.php').then(res => setCategories(res.data.trivia_categories));\n  }, []);\n\n  const getQuestions = (category, difficulty, amount) => {\n    axios.get(`https://opentdb.com/api.php?amount=10&category=${category}&difficulty=${difficulty}&type=multiple`).then(res => setQuestions(res.data.results));\n  }\n  return (\n    <div className=\"main\">\n      <BrowserRouter>\n        <Header />\n        <Switch className=\"app\">\n          <Route path=\"/\" exact>\n            <Home categories={categories} getQuestions={getQuestions} setQuestions={setQuestions} questions={questions}/>\n          </Route>\n          <Route path=\"/quiz\" exact>\n            {(questions!==[] ? <Quiz questions={questions} score={score} \n              setScore={setScore} setNotClicked={setNotClicked} notClicked={notClicked}/> : <p>loading</p>)}\n          </Route>\n          <Route path=\"/result\" exact className=\"result\">\n            <Button variant=\"standard\">Your result is {score}</Button>\n          </Route> \n        </Switch>\n      </BrowserRouter>\n    </div>\n  )\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}